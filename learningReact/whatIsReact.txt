meta가 개발한 오픈소스 js 라이브러리
대규모 웹 서비스의 UI를 간편하게 만드는 기술

가장 많은 인기를 누리고 있는 Front-end 기술

기술적 특징
1. 컴포넌트 기반 UI 표현
컴포넌트 :: 화면을 구성하는 요소
웹 페이지 내에서 header, main, footer를 각 파일로 만들어서 구성 가능

2. 화면 업데이트 구현이 쉽다
업데이트란? => 사용자의 행동에 따라 웹 페이지가 스스로 모습을 바꿔 상호작용 하는 것
react는 선언형 프로그래밍임 => 과정을 생략하고 목적만 간결히 명시하는 방법
<=> 명령형 프로그래밍 : 목적을 이루기 위한 모든 일련의 과정을 설명하는 방식
react는 각각의 화면을 컴포넌트로 구성하는데 State 값에 따라 다르게 랜더링(UI요소를 그려내는 것)이 가능

3. 화면 업데이트가 빠르게 처리된다
브러우저는 랜더링 과정이 존재함(Critical Rendering Path)
=> Render Tree : 웹 페이지의 설계도(DOM, CSSOM을 합쳐서 만듦) 그 이후 layout, painting

여기서 업데이트는? => js가 DOM을 수정할 때 업데이트가 이루어지는데 DOM을 업데이트하면 rendertree, layout, printing... 근데 여기서 layout, painting은 오래 걸림
그래서 동시에 발생한 업데이트를 모아서 다 모였으면 한 번에 수정하는 방식으로 해야하는데 React에서는 Virtual DOM을 통해서 자동으로 해줌

public 폴더 : img, 폰트 등 정적인 파일을 저장하는 폴더
src : js 파일 보관하는 곳



life cycle :: 생에 주기
리액트 컴포넌트의 라이프 사이클 :: Mount => update => unMount
Mount : 화면에 처음 랜더링 되는 순간
Update : 컴퍼넌트가 다시 렌더링 되는 순간, 리렌더링 될 때
unMount : 컴포넌트가 화면에서 사라지는 순간

Mount 되엇을 때, update 되었을 때, unMount 되었을 때 각각 동작을 다르게 사용하는 방식을 사용할 수 있음
:: 라이프사이클 제어

useEffect??
==> 부수적인 효과, 파생적인 효과 
동작으로 인해 파생되는 효과를 컴퍼넌트의 useEffect라고 부를 수 있음
:: 아니 useEffect 말고 이벤트 핸들러 사용하면 안되나요?
==> 네 안됩니다. useEffect는 비동기로 동작하기 때문에 값이 변경이 되었을 때 동작하고 이벤트 핸들러는 동기적으로 동작하기에
값이 변경되기 이전에 동작을 합니다. 

