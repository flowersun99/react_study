jsx :: 확장된 js 문법
주의 사항 
1. 중괄호 내부에는 자바스크립트 표현식만 넣을 수 있다 => if, for문 안됨
2. JSX에서는 숫자, 문자열, 배열 값만 랜더링 된다 => boolean, null, 객체 그대로는 랜더링 안됨
3. 모든 테그는 닫혀있어야 한다.
4. 최상위 태그는 반드시 하나여야 한다



Porps란?
컴퍼넌트로 리액트는 UI를 만듦.
컴퍼넌트에 전달된 값들을 Props라고 함

스프레드 연산자
객체의 값을 일일이 넣는게 아닌 일괄 제공을 도와주는 방식



이벤트 핸들링
- 웹 내부에서 발생하는 사용자의 행동을 다루는 것
ex. 버튼 클릭시 경고창 노출

합성 이벤트란?(Synthetic Base Event)
크롬, 사파리, firefox, ... 동작이 다 조금씩 다름
event 객체도 브라우저 별로 다 다름...(cross browsin issue)
==> 이를 합성하는 것!



State?
=> 현재 가지고 있는 형태나 모양을 정의, 바꿀 수 있는 값
state의 값에 따라 렌더링 되는 UI가 존재한다
하나의 컴퍼넌트에 여러 state 만들기 가능
==> 아니 그냥 js 문법 써서도 만들 수 있지않음??
:: 맞지만 컴포넌트가 바뀐다고 리랜더링이 되지 않기 때문에 useState 쓰는게 맞습니다

리액트에서 리랜더링되는 상황
1. State
2. 부모
3. props 
셋 중에 하나 변경 시 리랜더링이 됨

그래서 하나의 컴포넌트에는 하나의 state를 넣는게 좋음


useRef :: 새로운 Reference 객체를 생성하는 기능
useRef가 useState와 같아 보이지만 useRef는 컴퍼넌트를 리렌더링 유발하지 않음
=> 아니 이건 진짜 js 문법 써서도 만들 수 있는데? 리랜더링도 안하면
:: 맞지만 js로 사용 시 useState와 같이 사용하면 값이 리랜더링 되면서 초기화 될 가능성이 있음


React Hooks 클래스 컴포넌트의 기능을 함수 컴포넌트에도 사용할 수 있도록하는 기능
사실 useState, useRef는 react hooks 였음
state를 낚아채오는 것이라 use를 앞에서 사용함
=> 이것들은 조건문, 반복문에서는 사용 안되고 함수 내부에서 사용 가능

